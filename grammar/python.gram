# PEG grammar for Python

@trailer '''
func _PyPegen_parse(p *Parser) *AST {
    // Initialize keywords
    p.Keywords = reserved_keywords
    p.SoftKeywords = soft_keywords

    // Run parser
    var result *AST
    switch p.StartRule {
    case Py_file_input:
        return file_rule(p)
    }

    return result
}
'''

# ========================= START OF THE GRAMMAR =========================

# STARTING RULES
# ==============

file[mod_ty]: a=[statements] ENDMARKER { _PyPegen_make_module(p, a) }

# GENERAL STATEMENTS
# ==================

statements[*asdl_stmt_seq]: a=statement+ { _PyPegen_seq_flatten(p, a) }

statement[*asdl_stmt_seq]: a[*asdl_stmt_seq]=simple_stmts { a }

simple_stmts[*asdl_stmt_seq]:
    | a[*asdl_stmt_seq]=';'.simple_stmt+ [';'] NEWLINE { a }

# NOTE: assignment MUST precede expression, else parsing a simple assignment
# will throw a SyntaxError.
simple_stmt[stmt_ty] (memo):
    | assignment
    | 'pass' { _PyAST_Pass(EXTRA) }

# SIMPLE STATEMENTS
# =================

assignment[stmt_ty]:
    | a='(' b=single_target ')' { b }

single_target[expr_ty]:
    | a=NAME { _PyPegen_set_expr_context(p, a, Store) }
    | '(' a=single_target ')' { a }
